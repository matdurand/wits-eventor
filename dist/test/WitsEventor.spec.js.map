{"version":3,"sources":["../../test/WitsEventor.spec.js"],"names":["expect","require","describe","it","addSubjectDictionary","undefined","to","throw","Error","eventor","result","getEventFromInput","error","eql","be","subject","addActionDictionary","action"],"mappings":"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","file":"WitsEventor.spec.js","sourcesContent":["import {WitsEventor} from \"../src/Eventor\";\nlet expect = require('chai').expect;\n\ndescribe('eventor', () => {\n\n    it('should throw an error when pushing an empty dictionary', () => {\n        expect(() => new WitsEventor().addSubjectDictionary('fr', undefined)).to.throw(Error);\n    });\n\n    it('should throw an error when pushing a dictionary with a unknown language', () => {\n        expect(() => new WitsEventor().addSubjectDictionary('zz', ['a', 'b'])).to.throw(Error);\n    });\n\n    it('should return a non matching result if the subject is not found in the dictionary', () => {\n        const eventor = new WitsEventor();\n        eventor.addSubjectDictionary('en', ['Meeting']);\n        const result = eventor.getEventFromInput('Practice tomorrow at noon');\n        expect(result.error).to.eql('No subject found');\n    });\n\n    it('should return a non matching result if there is no dates', () => {\n        const eventor = new WitsEventor();\n        const result = eventor.getEventFromInput('Practice');\n        expect(result.error).to.eql('No dates found');\n    });\n\n    it('should return a matching result with a subject from the subject list with a exact match', () => {\n        const eventor = new WitsEventor();\n        eventor.addSubjectDictionary('en', ['Practice']);\n        const result = eventor.getEventFromInput('Practice tomorrow at noon');\n        expect(result.error).to.be.undefined;\n        expect(result.subject).to.eql('Practice');\n    });\n\n    it('should return a matching result with a subject from the subject list ignoring case', () => {\n        const eventor = new WitsEventor();\n        eventor.addSubjectDictionary('en', ['Practice']);\n        const result = eventor.getEventFromInput('practice tomorrow at noon');\n        expect(result.error).to.be.undefined;\n        expect(result.subject).to.eql('Practice');\n    });\n\n    it('should return a matching result with a subject from the subject list ignoring plurials', () => {\n        const eventor = new WitsEventor();\n        eventor.addSubjectDictionary('en', ['Practice']);\n        const result = eventor.getEventFromInput('practices tomorrow at noon');\n        expect(result.error).to.be.undefined;\n        expect(result.subject).to.eql('Practice');\n    });\n\n    it('should return a matching result with a subject and an action', () => {\n        const eventor = new WitsEventor();\n        eventor.addSubjectDictionary('en', ['Practice']);\n        eventor.addActionDictionary('en', ['Cancel']);\n        const result = eventor.getEventFromInput('Practice cancelled tomorrow morning');\n        expect(result.error).to.be.undefined;\n        expect(result.subject).to.eql('Practice');\n        expect(result.action).to.eql('Cancel');\n    });\n});"]}