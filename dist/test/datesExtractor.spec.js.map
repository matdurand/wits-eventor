{"version":3,"sources":["../../test/datesExtractor.spec.js"],"names":["assert","require","expect","textOne","textTwo","textFour","frenchText","englishText","describe","dateExtractor","it","result","extractDatesFromText","to","eql","undefined","extractedDates","length","dateTextExtracted","dateTextExtractedIndex","usedLanguage"],"mappings":";;AAAA;;AACA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,MAAR,EAAgBC,MAA7B;;AAEA,IAAIC,UAAU,wDAAd;AACA,IAAIC,UAAU,2BAAd;AACA,IAAIC,WAAW,uBAAf;AACA,IAAIC,aAAa,yEAAjB;AACA,IAAIC,cAAc,4CAAlB;;AAEAC,SAAS,eAAT,EAA0B,YAAY;;AAElC,QAAMC,gBAAgB,mCAAtB;;AAEAC,OAAG,mDAAH,EAAwD,YAAY;AAChE,YAAIC,SAASF,cAAcG,oBAAd,CAAmCP,QAAnC,CAAb;AACAH,eAAOS,MAAP,EAAeE,EAAf,CAAkBC,GAAlB,CAAsBC,SAAtB;AACH,KAHD;;AAKAL,OAAG,0DAAH,EAA+D,YAAY;AACvE,YAAIC,SAASF,cAAcG,oBAAd,CAAmCR,OAAnC,CAAb;AACAF,eAAOS,OAAOK,cAAP,CAAsBC,MAA7B,EAAqCJ,EAArC,CAAwCC,GAAxC,CAA4C,CAA5C;AACAZ,eAAOS,OAAOK,cAAP,CAAsB,CAAtB,EAAyBE,iBAAhC,EAAmDL,EAAnD,CAAsDC,GAAtD,CAA0D,OAA1D;AACAZ,eAAOS,OAAOK,cAAP,CAAsB,CAAtB,EAAyBG,sBAAhC,EAAwDN,EAAxD,CAA2DC,GAA3D,CAA+D,CAA/D;AACH,KALD;;AAOAJ,OAAG,+DAAH,EAAoE,YAAY;AAC5E,YAAIC,SAASF,cAAcG,oBAAd,CAAmCT,OAAnC,CAAb;AACAD,eAAOS,OAAOK,cAAP,CAAsBC,MAA7B,EAAqCJ,EAArC,CAAwCC,GAAxC,CAA4C,CAA5C;;AAEAZ,eAAOS,OAAOK,cAAP,CAAsB,CAAtB,EAAyBE,iBAAhC,EAAmDL,EAAnD,CAAsDC,GAAtD,CAA0D,UAA1D;AACAZ,eAAOS,OAAOK,cAAP,CAAsB,CAAtB,EAAyBG,sBAAhC,EAAwDN,EAAxD,CAA2DC,GAA3D,CAA+D,CAA/D;;AAEAZ,eAAOS,OAAOK,cAAP,CAAsB,CAAtB,EAAyBE,iBAAhC,EAAmDL,EAAnD,CAAsDC,GAAtD,CAA0D,gBAA1D;AACAZ,eAAOS,OAAOK,cAAP,CAAsB,CAAtB,EAAyBG,sBAAhC,EAAwDN,EAAxD,CAA2DC,GAA3D,CAA+D,EAA/D;AACH,KATD;;AAWAJ,OAAG,kDAAH,EAAuD,YAAY;AAC/D,YAAIC,SAASF,cAAcG,oBAAd,CAAmCN,UAAnC,CAAb;AACAJ,eAAOS,OAAOS,YAAd,EAA4BP,EAA5B,CAA+BC,GAA/B,CAAmC,IAAnC;AACH,KAHD;;AAKAJ,OAAG,mDAAH,EAAwD,YAAY;AAChE,YAAIC,SAASF,cAAcG,oBAAd,CAAmCL,WAAnC,CAAb;AACAL,eAAOS,OAAOS,YAAd,EAA4BP,EAA5B,CAA+BC,GAA/B,CAAmC,IAAnC;AACH,KAHD;AAKH,CArCD","file":"datesExtractor.spec.js","sourcesContent":["import {DateExtractor} from \"../src/datesExtractor\";\nlet assert = require('assert');\nlet expect = require('chai').expect;\n\nlet textOne = \"Tomorrow's practice cancelled, moved to next wednesday\";\nlet textTwo = \"Today's game is cancelled\";\nlet textFour = \"Envoye dont à maison!\";\nlet frenchText = 'La pratique de demain est annulée. Prochaine pratique sera demain à 10h';\nlet englishText = \"Next practice will be friday at 10 o'clock\";\n\ndescribe('dateExtractor', function () {\n\n    const dateExtractor = new DateExtractor();\n\n    it('should return undefined when nothing is extracted', function () {\n        let result = dateExtractor.extractDatesFromText(textFour);\n        expect(result).to.eql(undefined);\n    });\n\n    it('should return extracted dates with one text date in text', function () {\n        let result = dateExtractor.extractDatesFromText(textTwo);\n        expect(result.extractedDates.length).to.eql(1);\n        expect(result.extractedDates[0].dateTextExtracted).to.eql('Today');\n        expect(result.extractedDates[0].dateTextExtractedIndex).to.eql(0);\n    });\n\n    it('should return extracted dates with multiple text date in text', function () {\n        let result = dateExtractor.extractDatesFromText(textOne);\n        expect(result.extractedDates.length).to.eql(2);\n\n        expect(result.extractedDates[0].dateTextExtracted).to.eql('Tomorrow');\n        expect(result.extractedDates[0].dateTextExtractedIndex).to.eql(0);\n\n        expect(result.extractedDates[1].dateTextExtracted).to.eql('next wednesday');\n        expect(result.extractedDates[1].dateTextExtractedIndex).to.eql(40);\n    });\n\n    it('should return good used language for french text', function () {\n        let result = dateExtractor.extractDatesFromText(frenchText);\n        expect(result.usedLanguage).to.eql('fr');\n    });\n\n    it('should return good used language for english text', function () {\n        let result = dateExtractor.extractDatesFromText(englishText);\n        expect(result.usedLanguage).to.eql('en');\n    });\n\n});"]}