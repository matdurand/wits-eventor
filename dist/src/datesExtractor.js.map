{"version":3,"sources":["../../src/datesExtractor.js"],"names":["DateExtractor","chrono","require","text","results","parse","length","extractedDates","originalText","textWithoutDatesKeywords","usedLanguage","getTextLanguageFromResult","forEach","result","push","extractDateFromResult","extractDatesKeyWordFromText","name","tags","languageCode","substring","toLowerCase","extractedDate","value","ref","dateTextExtracted","dateTextExtractedIndex","index","replace"],"mappings":";;;;;;;;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;IAoBaA,a,WAAAA,a;AACT,6BAAc;AAAA;;AACV,aAAKC,MAAL,GAAcC,QAAQ,aAAR,CAAd;AACH;;;;6CAEoBC,I,EAAM;AACvB,gBAAIC,UAAU,KAAKH,MAAL,CAAYI,KAAZ,CAAkBF,IAAlB,CAAd;AACA,gBAAIC,QAAQE,MAAR,GAAiB,CAArB,EAAwB;AAAA;AACpB,wBAAIC,iBAAiB,EAArB;AACA,wBAAIC,eAAeL,IAAnB;AACA,wBAAIM,2BAA2BN,IAA/B;AACA,wBAAIO,eAAeC,0BAA0BP,QAAQ,CAAR,CAA1B,CAAnB;;AAEAA,4BAAQQ,OAAR,CAAgB,UAACC,MAAD,EAAY;AACxBN,uCAAeO,IAAf,CAAoBC,sBAAsBF,MAAtB,CAApB;AACAJ,mDAA2BO,4BAA4BP,wBAA5B,EAAsDI,MAAtD,CAA3B;AACH,qBAHD;;AAKA;AAAA,2BAAO;AACHL,sDADG;AAEHC,8EAFG;AAGHF,0DAHG;AAIHG;AAJG;AAAP;AAXoB;;AAAA;AAiBvB;AACJ;;;;;;AAGL,SAASC,yBAAT,CAAmCE,MAAnC,EAA2C;AACvC,SAAK,IAAII,IAAT,IAAiBJ,OAAOK,IAAxB,EAA8B;AAC1B,YAAIC,eAAeF,KAAKG,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAnB;AACA,eAAOD,aAAaE,WAAb,EAAP;AACH;AACJ;;AAED,SAASN,qBAAT,CAA+BF,MAA/B,EAAuC;AACnC,QAAIS,gBAAgB,EAApB;AACAA,kBAAcC,KAAd,GAAsBV,OAAOW,GAA7B;AACAF,kBAAcG,iBAAd,GAAkCZ,OAAOV,IAAzC;AACAmB,kBAAcI,sBAAd,GAAuCb,OAAOc,KAA9C;AACA,WAAOL,aAAP;AACH;;AAED,SAASN,2BAAT,CAAqCP,wBAArC,EAA+DI,MAA/D,EAAuE;AACnE,WAAOJ,yBAAyBmB,OAAzB,CAAiCf,OAAOV,IAAxC,EAA8C,EAA9C,CAAP;AACH","file":"datesExtractor.js","sourcesContent":["//Outputs\n/*\n * {\n *   originalText,\n *   textWithoutDatesKeywords,\n *   extractedDate : [\n *       {\n *           dateTextExtractedIndex : (position dans l'orginialText),\n *           dateTextExtracted : 'blbabla'\n *           value : La date javascript\n *       },\n *       {\n *\n *       }\n *   ],\n *   usedLanguage (ex : 'fr', 'en')\n * }\n *\n * */\n\n\nexport class DateExtractor {\n    constructor() {\n        this.chrono = require('chrono-node');\n    }\n\n    extractDatesFromText(text) {\n        let results = this.chrono.parse(text);\n        if (results.length > 0) {\n            let extractedDates = [];\n            let originalText = text;\n            let textWithoutDatesKeywords = text;\n            let usedLanguage = getTextLanguageFromResult(results[0]);\n\n            results.forEach((result) => {\n                extractedDates.push(extractDateFromResult(result));\n                textWithoutDatesKeywords = extractDatesKeyWordFromText(textWithoutDatesKeywords, result);\n            });\n\n            return {\n                originalText,\n                textWithoutDatesKeywords,\n                extractedDates,\n                usedLanguage\n            };\n        }\n    }\n}\n\nfunction getTextLanguageFromResult(result) {\n    for (let name in result.tags) {\n        let languageCode = name.substring(0, 2);\n        return languageCode.toLowerCase();\n    }\n}\n\nfunction extractDateFromResult(result) {\n    let extractedDate = {};\n    extractedDate.value = result.ref;\n    extractedDate.dateTextExtracted = result.text;\n    extractedDate.dateTextExtractedIndex = result.index;\n    return extractedDate;\n}\n\nfunction extractDatesKeyWordFromText(textWithoutDatesKeywords, result) {\n    return textWithoutDatesKeywords.replace(result.text, '');\n}"]}